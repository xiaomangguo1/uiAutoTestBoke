{"name": "test_app_article", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: Swipe action cannot be performed", "trace": "self = <page.page_app_article.PageAppArticle object at 0x0478E3D0>\nclick_text = 'Python'\n\n    def app_base_right_wipe_left(self, click_text):\n        \"\"\"\n    \n        :param loc_area: 区域元素定位信息\n        :param click_text: 点击文本\n        :return:\n        \"\"\"\n        # 1.查找区域元素\n        el = self.base_find_element(page.app_channel_area)\n        # 2.获取区域元素的位置y坐标点\n        y = el.location.get(\"y\")\n        # 3.获取区域元素宽高\n        width = el.size.get(\"width\")\n        height = el.size.get(\"height\")\n        # 4.计算start_X，starty,end_X,end_y\n        start_x = width * 0.8\n        start_y = y + y * 0.5\n        end_x = width * 0.2\n        end_y = y + y * 0.5\n        # 组合频道元素配置信息android.widget.LinearLayout\n        # loc = By.XPATH, \"//*[@class='android.widget.HorizontalScrollView']//*[contains(@text,'{}')]\".format(click_text)\n        loc = By.XPATH, \"//android.widget.HorizontalScrollView//*[contains(@text,'{}')]\".format(click_text)\n        #       #循环操作\n        while True:\n            # 获取当前屏幕页面结构\n            page_source = self.driver.page_source\n            # 捕获异常\n            try:\n                # 1、查找元素\n>               el = self.base_find_element(loc, timeout=3)\n\n..\\base\\app_base.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.page_app_article.PageAppArticle object at 0x0478E3D0>\nloc = ('xpath', \"//android.widget.HorizontalScrollView//*[contains(@text,'Python')]\")\ntimeout = 3, poll = 0.5\n\n    def base_find_element(self, loc, timeout=30, poll=0.5):\n        \"\"\"\n        :param loc:格式为列表或元祖，内容:元素定位信息使用By类\n        :param timeout:查找元素超时时间，默认30秒\n        :param poll:查找元素频率默认为0.5\n        :return:元素\n        \"\"\"\n        log.info(\"正在查找元素:{}\".format(loc))\n>       return (WebDriverWait(self.driver,\n                              timeout=timeout,\n                              poll_frequency=poll).until(lambda x: x.find_element(*loc)))\n\n..\\base\\base.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"73e7768e-8e5a-4334-8403-00948314f6cf\")>\nmethod = <function Base.base_find_element.<locals>.<lambda> at 0x0451D1D8>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nE:\\Users\\LXZ\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium-3.141.0-py3.8.egg\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <scripts.test06_app_article.TestAppArticle object at 0x0474DD30>\nfind_str = 'Python', title = '学习python第四天'\n\n    def test_app_article(self,find_str=\"Python\",title=\"学习python第四天\"):\n        # 调用文章业务方法\n>       self.app_article.page_app_article(find_str,title)\n\ntest06_app_article.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\page_app_article.py:17: in page_app_article\n    self.page_click_channel(find_text)\n..\\page\\page_app_article.py:7: in page_click_channel\n    self.app_base_right_wipe_left(click_text)\n..\\base\\app_base.py:71: in app_base_right_wipe_left\n    self.driver.swipe(start_x,start_y,end_x,end_y,duration=2000)\nE:\\Users\\LXZ\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\appium\\webdriver\\extensions\\action_helpers.py:136: in swipe\n    action.perform()\nE:\\Users\\LXZ\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\appium\\webdriver\\common\\touch_action.py:149: in perform\n    self._driver.execute(Command.TOUCH_ACTION, params)\nE:\\Users\\LXZ\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium-3.141.0-py3.8.egg\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nE:\\Users\\LXZ\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nE:\\Users\\LXZ\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0478E358>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Swipe action cannot be performed\",\"stac...ctory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\\\\n\\\\tat java.lang.Thread.run(Thread.java:818)\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: Swipe action cannot be performed\n\nE:\\Users\\LXZ\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\selenium-3.141.0-py3.8.egg\\selenium\\webdriver\\remote\\errorhandler.py:242: InvalidElementStateException"}, "attachments": [{"name": "log", "source": "ef96bbd6-4d1e-47d7-95cd-c79176a61030-attachment.txt", "type": "text/plain"}], "start": 1616340587543, "stop": 1616340604982, "uuid": "793234b8-4d7c-4fb8-ac47-5f5beb178119", "historyId": "9dcc4d1d9b82f98f6946390032b79375", "testCaseId": "fc335627585dcc9fbba9441bb898f94d", "fullName": "scripts.test06_app_article.TestAppArticle#test_app_article", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test06_app_article"}, {"name": "subSuite", "value": "TestAppArticle"}, {"name": "host", "value": "LAPTOP-PHNSP5RJ"}, {"name": "thread", "value": "13480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test06_app_article"}]}